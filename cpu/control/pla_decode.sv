//=====================================================================================
// This file is automatically generated by the z80_pla_checker tool. Do not edit!      
//=====================================================================================
module pla_decode (input wire [7:0] ir, input wire [4:0] prefix, output reg [107:0] pla);

always_comb
begin
    // Compare input bitfield to each PLA entry and assert those that match.
    // For each input, more than one signal may be asserted.

    if ({prefix[4:0], ir[7:0]} ==? 13'bX11XX0011010X)  pla[105]=1'b1; else pla[105]=1'b0;   // 0011010x  inc/dec (ix+d)
    if ({prefix[4:0], ir[7:0]} ==? 13'bX11XX10XXX110)  pla[104]=1'b1; else pla[104]=1'b0;   // 10xxx110  add/sub/and/or/xor/cp (ix+d)
    if ({prefix[4:0], ir[7:0]} ==? 13'bX11XX01110XXX)  pla[103]=1'b1; else pla[103]=1'b0;   // 01110xxx  ld (ix+d),r
    if ({prefix[4:0], ir[7:0]} ==? 13'bX11XX01XXX110)  pla[102]=1'b1; else pla[102]=1'b0;   // 01xxx110  ld r,(ix+d)
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX1111X011)  pla[ 97]=1'b1; else pla[ 97]=1'b0;   // 1111x011  di/ei
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX101XXX110)  pla[ 96]=1'b1; else pla[ 96]=1'b0;   // 01xxx110  im n
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX01110110)  pla[ 95]=1'b1; else pla[ 95]=1'b0;   // 01110110  halt
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00110111)  pla[ 92]=1'b1; else pla[ 92]=1'b0;   // 00110111  scf
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00111111)  pla[ 89]=1'b1; else pla[ 89]=1'b0;   // 00111111  ccf
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX10101X111)  pla[ 83]=1'b1; else pla[ 83]=1'b0;   // 0101x111  ld a,i/ld a,r
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX101XXX100)  pla[ 82]=1'b1; else pla[ 82]=1'b0;   // 01xxx100  neg
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00101111)  pla[ 81]=1'b1; else pla[ 81]=1'b0;   // 00101111  cpl
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00100111)  pla[ 77]=1'b1; else pla[ 77]=1'b0;   // 00100111  daa
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXX1X11XXXXXX)  pla[ 74]=1'b1; else pla[ 74]=1'b0;   // 11xxxxxx  set
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXX1X10XXXXXX)  pla[ 73]=1'b1; else pla[ 73]=1'b0;   // 10xxxxxx  res
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXX1X01XXXXXX)  pla[ 72]=1'b1; else pla[ 72]=1'b0;   // 01xxxxxx  bit
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXX1X00XXXXXX)  pla[ 70]=1'b1; else pla[ 70]=1'b0;   // 00xxxxxx  rotate/shift
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00XX1001)  pla[ 69]=1'b1; else pla[ 69]=1'b0;   // 00xx1001  add hl,ss
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX101XXX010)  pla[ 68]=1'b1; else pla[ 68]=1'b0;   // 01xxx010  adc/sbc hl,ss
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX101XXX000)  pla[ 67]=1'b1; else pla[ 67]=1'b0;   // 01xxx000  in r,(c)
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00XXX10X)  pla[ 66]=1'b1; else pla[ 66]=1'b0;   // 00xxx10x  inc/dec r
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX10XXXXXX)  pla[ 65]=1'b1; else pla[ 65]=1'b0;   // 10xxxxxx  add/sub/and/or/xor/cmp a,r
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11XXX110)  pla[ 64]=1'b1; else pla[ 64]=1'b0;   // 11xxx110  add/sub/and/or/xor/cmp a,n
    if ({prefix[4:0], ir[7:0]} ==? 13'b1XX1XXXXXXXXX)  pla[ 62]=1'b1; else pla[ 62]=1'b0;   // xxxxxxxx  Every CB without IX/IY
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX01XXXXXX)  pla[ 61]=1'b1; else pla[ 61]=1'b0;   // 01xxxxxx  ld r,r'
    if ({prefix[4:0], ir[7:0]} ==? 13'b1X1XX01110XXX)  pla[ 59]=1'b1; else pla[ 59]=1'b0;   // 01110xxx  ld (hl),r
    if ({prefix[4:0], ir[7:0]} ==? 13'b1X1XX01XXX110)  pla[ 58]=1'b1; else pla[ 58]=1'b0;   // 01xxx110  ld r,(hl)
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX10100X111)  pla[ 57]=1'b1; else pla[ 57]=1'b0;   // 0100x111  ld i,a/ld r,a
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11XXX111)  pla[ 56]=1'b1; else pla[ 56]=1'b0;   // 11xxx111  rst
    if ({prefix[4:0], ir[7:0]} ==? 13'bX1X1XXXXXXXXX)  pla[ 54]=1'b1; else pla[ 54]=1'b0;   // xxxxxxxx  Every CB with IX/IY
    if ({prefix[4:0], ir[7:0]} ==? 13'b1X1XX0011010X)  pla[ 53]=1'b1; else pla[ 53]=1'b0;   // 0011010x  inc/dec (hl)
    if ({prefix[4:0], ir[7:0]} ==? 13'b1X1XX10XXX110)  pla[ 52]=1'b1; else pla[ 52]=1'b0;   // 10xxx110  add/sub/and/or/xor/cp (hl)
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11101101)  pla[ 51]=1'b1; else pla[ 51]=1'b0;   // 11101101  ED
    if ({prefix[4:0], ir[7:0]} ==? 13'b1X1XX00110110)  pla[ 50]=1'b1; else pla[ 50]=1'b0;   // 00110110  ld (hl),n
    if ({prefix[4:0], ir[7:0]} ==? 13'bX11XX11001011)  pla[ 49]=1'b1; else pla[ 49]=1'b0;   // 11001011  CB with IX/IY
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX001XX000)  pla[ 48]=1'b1; else pla[ 48]=1'b0;   // 001xx000  jr ss,e
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00011000)  pla[ 47]=1'b1; else pla[ 47]=1'b0;   // 00011000  jr e
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX101XXX101)  pla[ 46]=1'b1; else pla[ 46]=1'b0;   // 01xxx101  reti/retn
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11XXX000)  pla[ 45]=1'b1; else pla[ 45]=1'b0;   // 11xxx000  ret cc
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11XXX010)  pla[ 43]=1'b1; else pla[ 43]=1'b0;   // 11xxx010  jp cc,nn
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11XXX100)  pla[ 42]=1'b1; else pla[ 42]=1'b0;   // 11xxx100  call cc,nn
    if ({prefix[4:0], ir[7:0]} ==? 13'bX11XX00110110)  pla[ 40]=1'b1; else pla[ 40]=1'b0;   // 00110110  ld (ix+d),n
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00001000)  pla[ 39]=1'b1; else pla[ 39]=1'b0;   // 00001000  ex af,af'
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX0011X010)  pla[ 38]=1'b1; else pla[ 38]=1'b0;   // 0011x010  ld (nn),a/a,(nn)
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX1101X011)  pla[ 37]=1'b1; else pla[ 37]=1'b0;   // 1101x011  out (n),a/in a,(n)
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11001001)  pla[ 35]=1'b1; else pla[ 35]=1'b0;   // 11001001  ret
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX101XXX001)  pla[ 34]=1'b1; else pla[ 34]=1'b0;   // 01xxx001  out (c),r
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX101XXX011)  pla[ 31]=1'b1; else pla[ 31]=1'b0;   // 01xxx011  ld rr,(nn)/(nn),rr
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX0010X010)  pla[ 30]=1'b1; else pla[ 30]=1'b0;   // 0010x010  ld hl,(nn)/(nn),hl
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11000011)  pla[ 29]=1'b1; else pla[ 29]=1'b0;   // 11000011  jp nn
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00010000)  pla[ 26]=1'b1; else pla[ 26]=1'b0;   // 00010000  djnz e
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX000XX111)  pla[ 25]=1'b1; else pla[ 25]=1'b0;   // 000xx111  rlca/rla/rrca/rra
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11001101)  pla[ 24]=1'b1; else pla[ 24]=1'b0;   // 11001101  call nn
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11XX0X01)  pla[ 23]=1'b1; else pla[ 23]=1'b0;   // 11xx0x01  push qq/pop qq
    if ({prefix[4:0], ir[7:0]} ==? 13'b1X1XX11001011)  pla[ 22]=1'b1; else pla[ 22]=1'b0;   // 11001011  CB without IX/IY
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX1101XX010)  pla[ 21]=1'b1; else pla[ 21]=1'b0;   // 101xx010  inx/inxr
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX1101XX011)  pla[ 20]=1'b1; else pla[ 20]=1'b0;   // 101xx011  outx/otxr
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00XXX110)  pla[ 17]=1'b1; else pla[ 17]=1'b0;   // 00xxx110  ld r,n
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX10110X111)  pla[ 15]=1'b1; else pla[ 15]=1'b0;   // 0110x111  rrd/rld
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX1101XX000)  pla[ 12]=1'b1; else pla[ 12]=1'b0;   // 101xx000  ldi/ldir/ldd/lddr
    if ({prefix[4:0], ir[7:0]} ==? 13'bXXXX1101XX001)  pla[ 11]=1'b1; else pla[ 11]=1'b0;   // 101xx001  cpi/cpir/cpd/cpdr
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11100011)  pla[ 10]=1'b1; else pla[ 10]=1'b0;   // 11100011  ex (sp),hl
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00XXX011)  pla[  9]=1'b1; else pla[  9]=1'b0;   // 00xxx011  inc/dec ss
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX000XX010)  pla[  8]=1'b1; else pla[  8]=1'b0;   // 000xx010  ld (rr),a/a,(rr)
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX00XX0001)  pla[  7]=1'b1; else pla[  7]=1'b0;   // 00xx0001  ld rr,nn
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11101001)  pla[  6]=1'b1; else pla[  6]=1'b0;   // 11101001  jp hl
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11111001)  pla[  5]=1'b1; else pla[  5]=1'b0;   // 11111001  ld sp,hl
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11X11101)  pla[  3]=1'b1; else pla[  3]=1'b0;   // 11x11101  IX/IY
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11101011)  pla[  2]=1'b1; else pla[  2]=1'b0;   // 11101011  ex de,hl
    if ({prefix[4:0], ir[7:0]} ==? 13'bXX1XX11011001)  pla[  1]=1'b1; else pla[  1]=1'b0;   // 11011001  exx

    // PLA table entries that are ignored (not used)
    pla[ 88]=1'b0;   // xx101xxx  101 (XOR)
    pla[ 86]=1'b0;   // xx110xxx  110 (OR)
    pla[ 85]=1'b0;   // xx100xxx  100 (AND)
    pla[ 84]=1'b0;   // xx000xxx  000 (ADD)
    pla[ 80]=1'b0;   // xx001xxx  001 (ADC)
    pla[ 79]=1'b0;   // xx011xxx  011 (SBC)
    pla[ 78]=1'b0;   // xx010xxx  010 (SUB)
    pla[ 76]=1'b0;   // xx111xxx  111 (CP)
    pla[101]=1'b0;   // xxx1xxxx  opcode[4]
    pla[100]=1'b0;   // xxxx1xxx  opcode[3]
    pla[ 99]=1'b0;   // xxxxxxx1  opcode[0]
    pla[ 91]=1'b0;   // 101xx01x  _blockio(20,21)
    pla[ 75]=1'b0;   // 00xxx101  _dec(53,66,105)
    pla[ 55]=1'b0;   // xxxxx110  _cbhl(70,72,73,74)
    pla[ 44]=1'b0;   // 11001011  _cb
    pla[ 33]=1'b0;   // 01xx0011  _store(31)
    pla[ 28]=1'b0;   // 11010011  _out(37)
    pla[ 27]=1'b0;   // 01xxx00x  _io(34,67)
    pla[ 16]=1'b0;   // 11xx0101  _push(23)
    pla[ 14]=1'b0;   // 00xx1011  _dec(9)
    pla[ 13]=1'b0;   // 00xx0010  _dir(8,30,38)
    pla[  4]=1'b0;   // 010xx111  _useir(57,83)
    pla[  0]=1'b0;   // 1010x0xx  _break(11,12,20,21)
    pla[ 98]=1'b0;   // 1101x011  out (*),a/in a,(*)
    pla[ 94]=1'b0;   // 101xx000  ldi/ldir/ldd/lddr
    pla[ 93]=1'b0;   // 101xx001  cpi/cpir/cpd/cpdr
    pla[ 90]=1'b0;   // 00010000  djnz *
    pla[ 87]=1'b0;   // 0101x111  ld a,i/ld a,r
    pla[ 71]=1'b0;   // 000xx111  rlca/rla/rrca/rra
    pla[ 63]=1'b0;   // 00xxx110  ld r,*
    pla[ 60]=1'b0;   // 0110x111  rrd/rld
    pla[ 41]=1'b0;   // 11x11101  IX/IY
    pla[ 36]=1'b0;   // 000xx010  ld(rr),a/a,(rr)
    pla[ 32]=1'b0;   // 010xx111  ld i,a/a,i/r,a/a,r
    pla[ 19]=1'b0;   // 101xx001  cpi/cpir/cpd/cpdr
    pla[ 18]=1'b0;   // 101xx000  ldi/ldir/ldd/lddr
    pla[107]=1'b0;   // 00000000  reserved2
    pla[106]=1'b0;   // 00000000  reserved1
end

endmodule

