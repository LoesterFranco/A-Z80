// Automatically generated by genmatrix.py
// 8-bit Load Group
if (pla[61]) begin
    $display("pla[61] : ld r,r'");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo={!rsel3,rsel3}; /* Write 8-bit GP register */
                    ctl_sw_2u=1;
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_op1_oe=1; /* OP1 latch */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1;
                    ctl_reg_gp_sel=op21; ctl_reg_gp_hilo={!rsel0,rsel0};/* Read 8-bit GP register selected by op[2:0] */
                    ctl_sw_2d=1;
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op1_sel_bus=1; /* Internal bus */ end
end

if (pla[17] && !pla[50]) begin
    $display("pla[17] && !pla[50] : ld r,n");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo={!rsel3,rsel3}; /* Write 8-bit GP register */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; setM1=1; end
end

if (~use_ixiy && pla[58]) begin
    $display("~use_ixiy && pla[58] : ld r,(hl)");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo={!rsel3,rsel3}; /* Write 8-bit GP register */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit HL, enable SW4 downstream */
                    ctl_al_we=1; /* Write a value from the abus to the address latch */ end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; nextM=1; setM1=1; end
end

if (use_ixiy && pla[58]) begin
    $display("use_ixiy && pla[58] : ld r,(ix+d)");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo={!rsel3,rsel3}; /* Write 8-bit GP register */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin 
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op1_sel_bus=1; /* Internal bus */ end
    if (M3 && T2) begin 
                    ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op2_sel_bus=1; /* Internal bus */
                   
        ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=0;                                                                ctl_pf_sel=`PFSEL_V;
    if (ctl_alu_op_low) begin
                                                                                     ctl_flags_cf_set=1; ctl_flags_cf_cpl=1;
    end else begin
        ctl_alu_core_hf=1;
    end
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */
                    ctl_flags_hf_we=1;
                    ctl_flags_cf_we=1; end
    if (M3 && T3) begin 
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                   
        ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=0;                                                                ctl_pf_sel=`PFSEL_V;
    if (ctl_alu_op_low) begin
                                                                                     ctl_flags_cf_set=1; ctl_flags_cf_cpl=1;
    end else begin
        ctl_alu_core_hf=1;
    end
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */
                    ctl_flags_hf_we=1;
                    ctl_flags_cf_we=1; end
    if (M3 && T4) begin 
                    ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op2_sel_bus=1; /* Internal bus */
                   
        ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=0;                                                                ctl_pf_sel=`PFSEL_V;
    if (ctl_alu_op_low) begin
    end else begin
        ctl_alu_core_hf=1;
    end
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */
                    ctl_flags_hf_we=1;
                    ctl_flags_cf_we=1; end
    if (M3 && T5) begin  nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                   
        ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=0;                                                                ctl_pf_sel=`PFSEL_V;
    if (ctl_alu_op_low) begin
    end else begin
        ctl_alu_core_hf=1;
    end
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */
                    ctl_flags_hf_we=1;
                    ctl_flags_cf_we=1; end
    if (M4 && T1) begin  fMRead=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; /* Write a value from the abus to the address latch */ end
    if (M4 && T2) begin  fMRead=1; end
    if (M4 && T3) begin  fMRead=1; nextM=1; setM1=1; end
end

if (pla[59]) begin
    $display("pla[59] : ld (hl),r");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1;
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo={!rsel3,rsel3};/* Read 8-bit GP register */
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M2 && T1) begin  fMWrite=1;
                    ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit HL, enable SW4 downstream */
                    ctl_al_we=1; /* Write a value from the abus to the address latch */ end
    if (M2 && T2) begin  fMWrite=1; end
    if (M2 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (use_ixiy && pla[59]) begin
    $display("use_ixiy && pla[59] : ld (ix+d),r");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  fMRead=1; end
    if (M3 && T2) begin  fMRead=1; end
    if (M3 && T3) begin  fMRead=1; end
    if (M3 && T4) begin  end
    if (M3 && T5) begin  nextM=1; end
    if (M4 && T1) begin  fMWrite=1; end
    if (M4 && T2) begin  fMWrite=1; end
    if (M4 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[50] && !pla[40]) begin
    $display("pla[50] && !pla[40] : ld (hl),n");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  fMWrite=1;
                    ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit HL, enable SW4 downstream */
                    ctl_al_we=1; /* Write a value from the abus to the address latch */ end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[40]) begin
    $display("pla[40] : ld (ix+d),n");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; end
    if (M3 && T4) begin  end
    if (M3 && T5) begin  nextM=1; end
    if (M4 && T1) begin  fMWrite=1; end
    if (M4 && T2) begin  fMWrite=1; end
    if (M4 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[8] && pla[13]) begin
    $display("pla[8] && pla[13] : ld (rr),a");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1;
                    ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M2 && T1) begin  fMWrite=1;
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1; /* Read 16-bit general purpose register, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMWrite=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[8] && !pla[13]) begin
    $display("pla[8] && !pla[13] : ld a,(rr)");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1; /* Read 16-bit general purpose register, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; setM1=1; end
end

if (pla[38] && pla[13]) begin
    $display("pla[38] && pla[13] : ld (nn),a");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M4 && T1) begin  fMWrite=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */
                    ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M4 && T2) begin  fMWrite=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M4 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[38] && !pla[13]) begin
    $display("pla[38] && !pla[13] : ld a,(nn)");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M4 && T1) begin  fMRead=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M4 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M4 && T3) begin  fMRead=1; nextM=1; setM1=1; end
end

if (pla[83]) begin
    $display("pla[83] : ld a,i/a,r");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_sw_1d=1;
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_op1_oe=1; /* OP1 latch */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM1=1; end
    if (M1 && T5) begin  nextM=1; setM1=1;
                    ctl_reg_sel_ir=1; ctl_reg_sys_hilo={!op3,op3}; /* Read either I or R based on op3 (0 or 1) */
                    ctl_sw_2d=1;
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op1_sel_bus=1; /* Internal bus */ end
end

if (pla[57]) begin
    $display("pla[57] : ld i,a/r,a");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM1=1;
                    ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1u=1;
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op1_sel_bus=1; /* Internal bus */ end
    if (M1 && T5) begin  nextM=1; setM1=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_ir=1; ctl_reg_sys_hilo={!op3,op3}; /* Write either I or R based on op3 (0 or 1) */
                    ctl_sw_2u=1;
                    ctl_sw_1d=1;
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_op1_oe=1; /* OP1 latch */ end
end

// 16-bit Load Group
if (pla[7]) begin
    $display("pla[7] : ld rr,nn");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b10; /* Write 8-bit GP register high byte */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_reg_use_sp=1; /* For 16-bit loads: use SP instead of AF */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b01; /* Write 8-bit GP register low byte */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_reg_use_sp=1; /* For 16-bit loads: use SP instead of AF */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1; setM1=1; end
end

if (pla[30] && pla[13]) begin
    $display("pla[30] && pla[13] : ld (nn),hl");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M4 && T1) begin  fMWrite=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b01; /* Read 8-bit GP register low byte */
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M4 && T2) begin  fMWrite=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M4 && T3) begin  fMWrite=1; nextM=1; end
    if (M5 && T1) begin  fMWrite=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b10; /* Read 8-bit GP register high byte */
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M5 && T2) begin  fMWrite=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M5 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[30] && !pla[13]) begin
    $display("pla[30] && !pla[13] : ld hl,(nn)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M4 && T1) begin  fMRead=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M4 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M4 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b01; /* Write 8-bit GP register low byte */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M5 && T1) begin  fMRead=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M5 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M5 && T3) begin  fMRead=1; nextM=1; setM1=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b10; /* Write 8-bit GP register high byte */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
end

if (pla[31] && pla[33]) begin
    $display("pla[31] && pla[33] : ld (nn),rr");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M4 && T1) begin  fMWrite=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b01; /* Read 8-bit GP register low byte */
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M4 && T2) begin  fMWrite=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M4 && T3) begin  fMWrite=1; nextM=1; end
    if (M5 && T1) begin  fMWrite=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b10; /* Read 8-bit GP register high byte */
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M5 && T2) begin  fMWrite=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M5 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[31] && !pla[33]) begin
    $display("pla[31] && !pla[33] : ld rr,(nn)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M4 && T1) begin  fMRead=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M4 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M4 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b01; /* Write 8-bit GP register low byte */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M5 && T1) begin  fMRead=1;
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M5 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M5 && T3) begin  fMRead=1; nextM=1; setM1=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b10; /* Write 8-bit GP register high byte */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
end

if (pla[5]) begin
    $display("pla[5] : ld sp,hl");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM1=1; end
    if (M1 && T5) begin 
                    ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit HL, enable SW4 downstream */
                    ctl_al_we=1; /* Write a value from the abus to the address latch */ end
    if (M1 && T6) begin  nextM=1; setM1=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; /* Output enable incrementer to the abus */ end
end

if (pla[23] && pla[16]) begin
    $display("pla[23] && pla[16] : push qq");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM1=1; end
    if (M1 && T5) begin  nextM=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Write latch and start decrementing */ end
    if (M2 && T1) begin  fMWrite=1;
                    ctl_ab_mux_inc=1; ctl_inc_cy=1; ctl_inc_dec=1; /* MUX output to apads while holding to decrement (for push) */
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b10; /* Read 8-bit GP register high byte */
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M2 && T2) begin  fMWrite=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Output enable while holding to decrement */ end
    if (M2 && T3) begin  fMWrite=1; nextM=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Write latch and start decrementing */ end
    if (M3 && T1) begin  fMWrite=1;
                    ctl_ab_mux_inc=1; ctl_inc_cy=1; ctl_inc_dec=1; /* MUX output to apads while holding to decrement (for push) */
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b01; /* Read 8-bit GP register low byte */
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M3 && T2) begin  fMWrite=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Output enable while holding to decrement */ end
    if (M3 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[23] && !pla[16]) begin
    $display("pla[23] && !pla[16] : pop qq");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b01; /* Write 8-bit GP register low byte */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1; setM1=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b10; /* Write 8-bit GP register high byte */
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
end

// Exchange, Block Transfer and Search Groups
if (pla[2]) begin
    $display("pla[2] : ex de,hl");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_ex_de_hl=1; /* EX DE,HL */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[39]) begin
    $display("pla[39] : ex af,af'");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_ex_af=1; /* EX AF,AF' */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[1]) begin
    $display("pla[1] : exx");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_exx=1; /* EXX */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[10]) begin
    $display("pla[10] : ex (sp),hl");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T4) begin  nextM=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Write latch and start decrementing */ end
    if (M4 && T1) begin  fMWrite=1;
                    ctl_ab_mux_inc=1; ctl_inc_cy=1; ctl_inc_dec=1; /* MUX output to apads while holding to decrement (for push) */
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b10; /* Read 8-bit GP register high byte */
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M4 && T2) begin  fMWrite=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Output enable while holding to decrement */ end
    if (M4 && T3) begin  fMWrite=1; nextM=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Write latch and start decrementing */ end
    if (M5 && T1) begin  fMWrite=1;
                    ctl_ab_mux_inc=1; ctl_inc_cy=1; ctl_inc_dec=1; /* MUX output to apads while holding to decrement (for push) */
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b01; /* Read 8-bit GP register low byte */
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M5 && T2) begin  fMWrite=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Output enable while holding to decrement */ end
    if (M5 && T3) begin  fMWrite=1; end
    if (M5 && T4) begin 
                    ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Select 16-bit WZ */
                    ctl_al_we=1; /* Write a value from the abus to the address latch */ end
    if (M5 && T5) begin  nextM=1; setM1=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b11; ctl_sw_4u=1; /* Write 16-bit HL, enable SW4 upstream */
                    ctl_bus_inc_oe=1; /* Output enable incrementer to the abus */ end
end

if (pla[12]) begin
    $display("pla[12] : ldi/ldir/ldd/lddr");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  fMWrite=1; end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; end
    if (M3 && T4) begin  end
    if (M3 && T5) begin  nextM=1; end
    if (M4 && T1) begin  end
    if (M4 && T2) begin  end
    if (M4 && T3) begin  end
    if (M4 && T4) begin  end
    if (M4 && T5) begin  nextM=1; setM1=1; end
end

if (pla[11]) begin
    $display("pla[11] : cpi/cpir/cpd/cpdr");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  end
    if (M3 && T2) begin  end
    if (M3 && T3) begin  end
    if (M3 && T4) begin  end
    if (M3 && T5) begin  nextM=1; end
    if (M4 && T1) begin  end
    if (M4 && T2) begin  end
    if (M4 && T3) begin  end
    if (M4 && T4) begin  end
    if (M4 && T5) begin  nextM=1; setM1=1; end
end

// 8-bit Arithmetic and Logic Group
if (pla[65] && !pla[52]) begin
    $display("pla[65] && !pla[52] : add/sub/and/or/xor/cmp a,r");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                    ctl_state_alu=1; /* Assert the ALU PLA modifier to determine operation */
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_pf_we=1;
                    ctl_flags_cf_we=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_flags_oe=1; /* Enable FLAGT onto the data bus */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1;
                    ctl_reg_gp_sel=op21; ctl_reg_gp_hilo={!rsel0,rsel0};/* Read 8-bit GP register selected by op[2:0] */
                    ctl_sw_2d=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op2_sel_bus=1; /* Internal bus */
                    ctl_state_alu=1; /* Assert the ALU PLA modifier to determine operation */
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_pf_we=1; end
end

if (pla[64]) begin
    $display("pla[64] : add/sub/and/or/xor/cmp a,n");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                    ctl_state_alu=1; /* Assert the ALU PLA modifier to determine operation */
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_pf_we=1;
                    ctl_flags_cf_we=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_flags_oe=1; /* Enable FLAGT onto the data bus */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1;
                    ctl_reg_gp_sel=op21; ctl_reg_gp_hilo={!rsel0,rsel0};/* Read 8-bit GP register selected by op[2:0] */
                    ctl_sw_2d=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op2_sel_bus=1; /* Internal bus */
                    ctl_state_alu=1; /* Assert the ALU PLA modifier to determine operation */
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_pf_we=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; setM1=1;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op2_sel_bus=1; /* Internal bus */
                    ctl_state_alu=1; /* Assert the ALU PLA modifier to determine operation */
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_pf_we=1; end
end

if (!use_ixiy && pla[52]) begin
    $display("!use_ixiy && pla[52] : add/sub/and/or/xor/cp (hl)");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                    ctl_state_alu=1; /* Assert the ALU PLA modifier to determine operation */
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_pf_we=1;
                    ctl_flags_cf_we=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_flags_oe=1; /* Enable FLAGT onto the data bus */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit HL, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; setM1=1;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op2_sel_bus=1; /* Internal bus */
                    ctl_state_alu=1; /* Assert the ALU PLA modifier to determine operation */
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_pf_we=1; end
end

if (use_ixiy && pla[52]) begin
    $display("use_ixiy && pla[52] : add/sub/and/or/xor/cp (ix+d)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; contM2=1; end
    if (M3 && T1) begin  end
    if (M3 && T2) begin  end
    if (M3 && T3) begin  end
    if (M3 && T4) begin  end
    if (M3 && T5) begin  contM2=1; end
    if (M4 && T1) begin  fMRead=1; end
    if (M4 && T2) begin  fMRead=1; end
    if (M4 && T3) begin  fMRead=1; nextM=1; setM1=1; end
end

if (!use_ixiy && pla[66] && !pla[53]) begin
    $display("!use_ixiy && pla[66] && !pla[53] : inc/dec r");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (!use_ixiy && pla[53]) begin
    $display("!use_ixiy && pla[53] : inc/dec (hl)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; end
    if (M2 && T4) begin  nextM=1; end
    if (M3 && T1) begin  fMWrite=1; end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (use_ixiy && pla[53]) begin
    $display("use_ixiy && pla[53] : inc/dec (ix+d)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; contM2=1; end
    if (M3 && T1) begin  end
    if (M3 && T2) begin  end
    if (M3 && T3) begin  end
    if (M3 && T4) begin  end
    if (M3 && T5) begin  contM2=1; end
    if (M4 && T1) begin  fMRead=1; end
    if (M4 && T2) begin  fMRead=1; end
    if (M4 && T3) begin  fMRead=1; end
    if (M4 && T4) begin  contM2=1; end
    if (M3 && T1) begin  fMWrite=1; end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[53] && pla[75]) begin
    $display("pla[53] && pla[75] : dec (hl)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; end
    if (M2 && T4) begin  nextM=1; end
    if (M3 && T1) begin  fMWrite=1; end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

// 16-bit Arithmetic Group
if (pla[69]) begin
    $display("pla[69] : add hl,ss");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  end
    if (M2 && T2) begin  end
    if (M2 && T3) begin  end
    if (M2 && T4) begin  nextM=1; end
    if (M3 && T1) begin  end
    if (M3 && T2) begin  end
    if (M3 && T3) begin  nextM=1; setM1=1; end
end

if (pla[68]) begin
    $display("pla[68] : adc/sbc hl,ss");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  end
    if (M2 && T2) begin  end
    if (M2 && T3) begin  end
    if (M2 && T4) begin  nextM=1; end
    if (M3 && T1) begin  end
    if (M3 && T2) begin  end
    if (M3 && T3) begin  nextM=1; setM1=1; end
end

if (pla[9]) begin
    $display("pla[9] : inc/dec ss");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM1=1; end
    if (M1 && T5) begin 
                    ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1; /* Read 16-bit general purpose register, enable SW4 downstream */
                    ctl_al_we=1; /* Write a value from the abus to the address latch */ end
    if (M1 && T6) begin  nextM=1; setM1=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op54; ctl_reg_gp_hilo=2'b11; ctl_sw_4u=1; /* Write 16-bit general purpose register, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; ctl_inc_dec=op3; /* Used for INC/DEC: decrement if op3 is set */ end
end

// General Purpose Arithmetic and CPU Control Groups
if (pla[77]) begin
    $display("pla[77] : daa");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[81]) begin
    $display("pla[81] : cpl");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[82]) begin
    $display("pla[82] : neg");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[89]) begin
    $display("pla[89] : ccf");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_flags_cf_cpl=1; /* CCF */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[92]) begin
    $display("pla[92] : scf");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_flags_cf_set=1; /* SCF */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[95]) begin
    $display("pla[95] : halt");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[97]) begin
    $display("pla[97] : di/ei");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_iffx_bit=op3; ctl_iffx_we=1; /* DI/EI */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[96]) begin
    $display("pla[96] : im n");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_im_sel=op43; ctl_im_we=1; /* IM n */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

// Rotate and Shift Group
if (pla[25]) begin
    $display("pla[25] : rlca/rla/rrca/rra");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                    ctl_alu_core_R=1; ctl_alu_core_V=1; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_flags_cf_cpl=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */
                    ctl_flags_cf_we=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_flags_oe=1; /* Enable FLAGT onto the data bus */
                    ctl_flags_sel_cf2=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1;
                    ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_shift_oe=1; ctl_shift_en=1; /* Shifter unit AND shift enable! */
                    ctl_alu_op2_sel_bus=1; /* Internal bus */
                    ctl_alu_op1_sel_bus=1; /* Internal bus */
                    ctl_alu_core_R=1; ctl_alu_core_V=1; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_flags_cf_cpl=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */
                    ctl_flags_cf2_we=1; end
end

if (pla[70] && !pla[55]) begin
    $display("pla[70] && !pla[55] : rlc r");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[70] && pla[55]) begin
    $display("pla[70] && pla[55] : rlc (hl)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; end
    if (M2 && T4) begin  nextM=1; end
    if (M3 && T1) begin  fMWrite=1; end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[15] && op3) begin
    $display("pla[15] && op3 : rld");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                    ctl_alu_core_R=1; ctl_alu_core_V=1; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_flags_cf_cpl=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_pf_we=1;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_flags_oe=1; /* Enable FLAGT onto the data bus */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit HL, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin 
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op2_sel_lq=1; /* Cross-bus wire (see schematic) */
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */ end
    if (M3 && T2) begin  end
    if (M3 && T3) begin  end
    if (M3 && T4) begin  nextM=1;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op1_sel_low=1; /* Write low nibble with a high nibble */
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */ end
    if (M4 && T1) begin  fMWrite=1;
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_op2_oe=1; /* OP2 latch */ end
    if (M4 && T2) begin  fMWrite=1;
                    ctl_alu_op1_oe=1; /* OP1 latch */
                    ctl_alu_op2_sel_bus=1; /* Internal bus */ end
    if (M4 && T3) begin  fMWrite=1; nextM=1; setM1=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_core_R=1; ctl_alu_core_V=1; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_flags_cf_cpl=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_pf_we=1;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
end

if (pla[15] && !op3) begin
    $display("pla[15] && !op3 : rrd");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                    ctl_alu_core_R=1; ctl_alu_core_V=1; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_flags_cf_cpl=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_pf_we=1;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_flags_oe=1; /* Enable FLAGT onto the data bus */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit HL, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit WZ */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin 
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op2_sel_lq=1; /* Cross-bus wire (see schematic) */
                    ctl_alu_op1_sel_low=1; /* Write low nibble with a high nibble */
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */ end
    if (M3 && T2) begin 
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_op2_oe=1; /* OP2 latch */ end
    if (M3 && T3) begin 
                    ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b10;
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op2_sel_lq=1; /* Cross-bus wire (see schematic) */
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */ end
    if (M3 && T4) begin  nextM=1;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op1_sel_low=1; /* Write low nibble with a high nibble */
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */ end
    if (M4 && T1) begin  fMWrite=1;
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_op2_oe=1; /* OP2 latch */ end
    if (M4 && T2) begin  fMWrite=1;
                    ctl_alu_op1_oe=1; /* OP1 latch */
                    ctl_alu_op2_sel_bus=1; /* Internal bus */ end
    if (M4 && T3) begin  fMWrite=1; nextM=1; setM1=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_core_R=1; ctl_alu_core_V=1; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_flags_cf_cpl=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_pf_we=1;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
end

// Bit Manipulation Group
if (pla[72] && !pla[55]) begin
    $display("pla[72] && !pla[55] : bit b,r");
    if (M1 && T1) begin  fFetch=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                    ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_pf_we=1;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_flags_oe=1; /* Enable FLAGT onto the data bus */ end
    if (M1 && T3) begin  fFetch=1;
                    ctl_alu_bs_oe=1; /* Bit-selector unit */ end
    if (M1 && T4) begin  fFetch=1;
                    ctl_reg_gp_sel=op21; ctl_reg_gp_hilo={!rsel0,rsel0};/* Read 8-bit GP register selected by op[2:0] */
                    ctl_sw_2d=1;
                    ctl_flags_alu=1; /* Load FLAGT from the ALU */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op1_sel_bus=1; /* Internal bus */
                    ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_pf_we=1;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
end

if (pla[72] && pla[55]) begin
    $display("pla[72] && pla[55] : bit b,(hl)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; end
    if (M2 && T4) begin  nextM=1; setM1=1; end
end

if (pla[74] && !pla[55]) begin
    $display("pla[74] && !pla[55] : set b,r");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op21; ctl_reg_gp_hilo={!rsel0,rsel0}; /* Write 8-bit GP register selected by op[2:0] */
                    ctl_sw_2u=1;
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                    ctl_alu_core_R=1; ctl_alu_core_V=1; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_flags_cf_cpl=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */ end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_flags_oe=1; /* Enable FLAGT onto the data bus */ end
    if (M1 && T3) begin  fFetch=1;
                    ctl_alu_bs_oe=1; /* Bit-selector unit */ end
    if (M1 && T4) begin  fFetch=1;
                    ctl_reg_gp_sel=op21; ctl_reg_gp_hilo={!rsel0,rsel0};/* Read 8-bit GP register selected by op[2:0] */
                    ctl_sw_2d=1;
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op1_sel_bus=1; /* Internal bus */
                    ctl_alu_core_R=1; ctl_alu_core_V=1; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_flags_cf_cpl=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */ end
end

if (pla[74] && pla[55]) begin
    $display("pla[74] && pla[55] : set b,(hl)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; end
    if (M2 && T4) begin  nextM=1; end
    if (M3 && T1) begin  fMWrite=1; end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[73] && !pla[55]) begin
    $display("pla[73] && !pla[55] : res b,r");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=op21; ctl_reg_gp_hilo={!rsel0,rsel0}; /* Write 8-bit GP register selected by op[2:0] */
                    ctl_sw_2u=1;
                    ctl_alu_oe=1; /* Enable ALU onto the data bus */
                    ctl_alu_res_oe=1; /* Result latch */
                    ctl_alu_sel_op2_neg=1; ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_sel_op2_high=1; /* Activate ALU operation on high nibble */ end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_flags_oe=1; /* Enable FLAGT onto the data bus */ end
    if (M1 && T3) begin  fFetch=1;
                    ctl_alu_bs_oe=1; /* Bit-selector unit */ end
    if (M1 && T4) begin  fFetch=1;
                    ctl_reg_gp_sel=op21; ctl_reg_gp_hilo={!rsel0,rsel0};/* Read 8-bit GP register selected by op[2:0] */
                    ctl_sw_2d=1;
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op1_sel_bus=1; /* Internal bus */
                    ctl_alu_sel_op2_neg=1; ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_pf_sel=`PFSEL_P;
                    ctl_alu_op_low=1; /* Activate ALU operation on low nibble */ end
end

if (pla[73] && pla[55]) begin
    $display("pla[73] && pla[55] : res b,(hl)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; end
    if (M2 && T4) begin  nextM=1; end
    if (M3 && T1) begin  fMWrite=1; end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

// Input and Output Groups
if (pla[37] && pla[28]) begin
    $display("pla[37] && pla[28] : out (n),a");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  fIOWrite=1; end
    if (M3 && T2) begin  fIOWrite=1; end
    if (M3 && T3) begin  fIOWrite=1; end
    if (M3 && T4) begin  fIOWrite=1; nextM=1; setM1=1; end
end

if (pla[37] && !pla[28]) begin
    $display("pla[37] && !pla[28] : in a,(n)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  fIORead=1; end
    if (M3 && T2) begin  fIORead=1; end
    if (M3 && T3) begin  fIORead=1; end
    if (M3 && T4) begin  fIORead=1; nextM=1; setM1=1; end
end

if (pla[27] && !pla[34]) begin
    $display("pla[27] && !pla[34] : in r,(c)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fIORead=1; end
    if (M2 && T2) begin  fIORead=1; end
    if (M2 && T3) begin  fIORead=1; end
    if (M2 && T4) begin  fIORead=1; nextM=1; setM1=1; end
end

if (pla[27] && pla[34]) begin
    $display("pla[27] && pla[34] : out (c),r");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fIOWrite=1; end
    if (M2 && T2) begin  fIOWrite=1; end
    if (M2 && T3) begin  fIOWrite=1; end
    if (M2 && T4) begin  fIOWrite=1; nextM=1; setM1=1; end
end

if (pla[91] && pla[21]) begin
    $display("pla[91] && pla[21] : ini/inir/ind/indr");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM1=1; end
    if (M1 && T5) begin  nextM=1; end
    if (M2 && T1) begin  fIORead=1; end
    if (M2 && T2) begin  fIORead=1; end
    if (M2 && T3) begin  fIORead=1; end
    if (M2 && T4) begin  fIORead=1; nextM=1; end
    if (M3 && T1) begin  fMWrite=1; end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; nextM=1; end
    if (M4 && T1) begin  end
    if (M4 && T2) begin  end
    if (M4 && T3) begin  end
    if (M4 && T4) begin  end
    if (M4 && T5) begin  nextM=1; setM1=1; end
end

if (pla[91] && pla[20]) begin
    $display("pla[91] && pla[20] : outi/outir/outd/outdr");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM1=1; end
    if (M1 && T5) begin  nextM=1; end
    if (M2 && T1) begin  fIORead=1; end
    if (M2 && T2) begin  fIORead=1; end
    if (M2 && T3) begin  fIORead=1; end
    if (M2 && T4) begin  fIORead=1; nextM=1; end
    if (M3 && T1) begin  fMWrite=1; end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; nextM=1; end
    if (M4 && T1) begin  end
    if (M4 && T2) begin  end
    if (M4 && T3) begin  end
    if (M4 && T4) begin  end
    if (M4 && T5) begin  nextM=1; setM1=1; end
end

// Jump Group
if (pla[29]) begin
    $display("pla[29] : jp nn");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_not_pc=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Use WZ instead of PC (for jumps) */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1; setM1=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
end

if (pla[43]) begin
    $display("pla[43] : jp cc,nn");
    if (M1 && T1) begin  fFetch=1;
    if (flags_cond_true) begin      /* If cc is true, use WZ instead of PC (for jumps) */
        ctl_reg_not_pc=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1;
    end end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1; setM1=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
end

if (pla[47]) begin
    $display("pla[47] : jr e");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  end
    if (M3 && T2) begin  end
    if (M3 && T3) begin  end
    if (M3 && T4) begin  end
    if (M3 && T5) begin  nextM=1; setM1=1; end
end

if (pla[48]) begin
    $display("pla[48] : jr ss,e");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_cond_short=1; setM1=!flags_cond_true; end
    if (M3 && T1) begin  end
    if (M3 && T2) begin  end
    if (M3 && T3) begin  end
    if (M3 && T4) begin  end
    if (M3 && T5) begin  nextM=1; setM1=1; end
end

if (pla[6]) begin
    $display("pla[6] : jp hl");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_not_pc=1; ctl_reg_gp_sel=`GP_REG_HL; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1; /* Use HL, enable SW4 downstream (for jumps) */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[26]) begin
    $display("pla[26] : djnz e");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM1=1; end
    if (M1 && T5) begin  nextM=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; nextM=1; setM1=flags_zf; end
    if (M3 && T1) begin  end
    if (M3 && T2) begin  end
    if (M3 && T3) begin  end
    if (M3 && T4) begin  end
    if (M3 && T5) begin  nextM=1; setM1=1; end
end

// Call and Return Group
if (pla[24]) begin
    $display("pla[24] : call nn");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_not_pc=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Use WZ instead of PC (for jumps) */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T4) begin  nextM=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Write latch and start decrementing */ end
    if (M4 && T1) begin  fMWrite=1;
                    ctl_ab_mux_inc=1; ctl_inc_cy=1; ctl_inc_dec=1; /* MUX output to apads while holding to decrement (for push) */
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M4 && T2) begin  fMWrite=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Output enable while holding to decrement */ end
    if (M4 && T3) begin  fMWrite=1; nextM=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Write latch and start decrementing */ end
    if (M5 && T1) begin  fMWrite=1;
                    ctl_ab_mux_inc=1; ctl_inc_cy=1; ctl_inc_dec=1; /* MUX output to apads while holding to decrement (for push) */
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M5 && T2) begin  fMWrite=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Output enable while holding to decrement */ end
    if (M5 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[42]) begin
    $display("pla[42] : call cc,nn");
    if (M1 && T1) begin  fFetch=1;
    if (flags_cond_true) begin      /* If cc is true, use WZ instead of PC (for jumps) */
        ctl_reg_not_pc=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1;
    end end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=!flags_cond_true; setM1=!flags_cond_true;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T4) begin  nextM=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Write latch and start decrementing */ end
    if (M4 && T1) begin  fMWrite=1;
                    ctl_ab_mux_inc=1; ctl_inc_cy=1; ctl_inc_dec=1; /* MUX output to apads while holding to decrement (for push) */
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M4 && T2) begin  fMWrite=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Output enable while holding to decrement */ end
    if (M4 && T3) begin  fMWrite=1; nextM=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Write latch and start decrementing */ end
    if (M5 && T1) begin  fMWrite=1;
                    ctl_ab_mux_inc=1; ctl_inc_cy=1; ctl_inc_dec=1; /* MUX output to apads while holding to decrement (for push) */
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2u=1;
                    ctl_sw_1u=1;
                    ctl_bus_db_we=1; /* Write DB pads with internal data bus value */ end
    if (M5 && T2) begin  fMWrite=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; ctl_inc_dec=1; /* Output enable while holding to decrement */ end
    if (M5 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[35]) begin
    $display("pla[35] : ret");
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_not_pc=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1; /* Use WZ instead of PC (for jumps) */ end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1; setM1=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
end

if (pla[45]) begin
    $display("pla[45] : ret cc");
    if (M1 && T1) begin  fFetch=1;
    if (flags_cond_true) begin      /* If cc is true, use WZ instead of PC (for jumps) */
        ctl_reg_not_pc=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b11; ctl_sw_4d=1;
    end end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM1=1; end
    if (M1 && T5) begin  nextM=1; setM1=!flags_cond_true; end
    if (M2 && T1) begin  fMRead=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M2 && T2) begin  fMRead=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M2 && T3) begin  fMRead=1; nextM=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b01;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
    if (M3 && T1) begin  fMRead=1;
                    ctl_reg_use_sp=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_sw_4d=1;/* Read 16-bit SP, enable SW4 downstream */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M3 && T2) begin  fMRead=1;
                    ctl_reg_gp_we=1; ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11; ctl_reg_use_sp=1; ctl_sw_4u=1; /* Write 16-bit SP, enable SW4 upstream */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M3 && T3) begin  fMRead=1; nextM=1; setM1=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_wz=1; ctl_reg_sys_hilo=2'b10;
                    ctl_sw_2d=1;
                    ctl_sw_1d=1;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */ end
end

if (pla[46]) begin
    $display("pla[46] : reti/retn");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  fMRead=1; end
    if (M3 && T2) begin  fMRead=1; end
    if (M3 && T3) begin  fMRead=1; nextM=1; setM1=1; end
end

if (pla[56]) begin
    $display("pla[56] : rst p");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM1=1; end
    if (M1 && T5) begin  nextM=1; end
    if (M2 && T1) begin  fMWrite=1; end
    if (M2 && T2) begin  fMWrite=1; end
    if (M2 && T3) begin  fMWrite=1; nextM=1; end
    if (M3 && T1) begin  fMWrite=1; end
    if (M3 && T2) begin  fMWrite=1; end
    if (M3 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

// CB-Table opcodes
if (pla[49]) begin
    $display("pla[49] : Every CB with IX/IY");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; contM2=1; end
    if (M2 && T1) begin  fMRead=1; end
    if (M2 && T2) begin  fMRead=1; end
    if (M2 && T3) begin  fMRead=1; nextM=1; end
    if (M3 && T1) begin  fMRead=1; end
    if (M3 && T2) begin  fMRead=1; end
    if (M3 && T3) begin  fMRead=1; end
    if (M3 && T4) begin  end
    if (M3 && T5) begin  nextM=1; end
    if (M4 && T1) begin  end
    if (M4 && T2) begin  end
    if (M4 && T3) begin  end
end

if (pla[54] && pla[70] && !pla[55]) begin
    $display("pla[54] && pla[70] && !pla[55] : rlc (ix+d),r");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M5 && T1) begin  fMWrite=1; end
    if (M5 && T2) begin  fMWrite=1; end
    if (M5 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[54] && pla[70] && pla[55]) begin
    $display("pla[54] && pla[70] && pla[55] : rlc (ix+d)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M5 && T1) begin  fMWrite=1; end
    if (M5 && T2) begin  fMWrite=1; end
    if (M5 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[54] && pla[72] && !pla[55]) begin
    $display("pla[54] && pla[72] && !pla[55] : bit b,(ix+d)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M4 && T3) begin  nextM=1; setM1=1; end
end

if (pla[54] && pla[72] && pla[55]) begin
    $display("pla[54] && pla[72] && pla[55] : bit b,(ix+d)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M4 && T3) begin  nextM=1; setM1=1; end
end

if (pla[54] && pla[74] && !pla[55]) begin
    $display("pla[54] && pla[74] && !pla[55] : set b,(ix+d),r");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M5 && T1) begin  fMWrite=1; end
    if (M5 && T2) begin  fMWrite=1; end
    if (M5 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[54] && pla[74] && pla[55]) begin
    $display("pla[54] && pla[74] && pla[55] : set b,(ix+d)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M5 && T1) begin  fMWrite=1; end
    if (M5 && T2) begin  fMWrite=1; end
    if (M5 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[54] && pla[73] && !pla[55]) begin
    $display("pla[54] && pla[73] && !pla[55] : res b,(ix+d),r");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M5 && T1) begin  fMWrite=1; end
    if (M5 && T2) begin  fMWrite=1; end
    if (M5 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

if (pla[54] && pla[73] && pla[55]) begin
    $display("pla[54] && pla[73] && pla[55] : res b,(ix+d)");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1; end
    if (M5 && T1) begin  fMWrite=1; end
    if (M5 && T2) begin  fMWrite=1; end
    if (M5 && T3) begin  fMWrite=1; nextM=1; setM1=1; end
end

// Special Purposes PLA Entries
if (pla[3]) begin
    $display("pla[3] : IX/IY");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_state_iy_set=op5; ctl_state_ixiy_we=1; /* IX/IY prefix */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[51]) begin
    $display("pla[51] : ED prefix");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_state_tbl_ed_set=1; /* ED-table prefix */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[44]) begin
    $display("pla[44] : CB prefix");
    if (M1 && T1) begin  fFetch=1; end
    if (M1 && T2) begin  fFetch=1;
                    ctl_state_tbl_cb_set=1; /* CB-table prefix */ end
    if (M1 && T3) begin  fFetch=1; end
    if (M1 && T4) begin  fFetch=1; end
end

if (pla[76]) begin
    $display("pla[76] : ALU CP");
    begin 
                   
    ctl_alu_sel_op2_neg=1;
        ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=0;                                                                ctl_pf_sel=`PFSEL_V;
    if (ctl_alu_op_low) begin
                                                                                     ctl_flags_cf_set=1;
    end else begin
        ctl_alu_core_hf=1;
    end
                    ctl_flags_nf_we=1; ctl_flags_nf_set=1; end
end

if (pla[78]) begin
    $display("pla[78] : ALU SUB");
    begin 
                   
    ctl_alu_sel_op2_neg=1;
        ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=0;                                                                ctl_pf_sel=`PFSEL_V;
    if (ctl_alu_op_low) begin
                                                                                     ctl_flags_cf_set=1;
    end else begin
        ctl_alu_core_hf=1;
    end
                    ctl_flags_nf_we=1; ctl_flags_nf_set=1; end
end

if (pla[79]) begin
    $display("pla[79] : ALU SBC");
    begin 
                   
    ctl_alu_sel_op2_neg=1;
        ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=0;                                                                ctl_pf_sel=`PFSEL_V;
    if (ctl_alu_op_low) begin
                                                                                                         ctl_flags_cf_cpl=1;
    end else begin
        ctl_alu_core_hf=1;
    end
                    ctl_flags_nf_we=1; ctl_flags_nf_set=1; end
end

if (pla[80]) begin
    $display("pla[80] : ALU ADC");
    begin 
                   
        ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=0;                                                                ctl_pf_sel=`PFSEL_V;
    if (ctl_alu_op_low) begin
    end else begin
        ctl_alu_core_hf=1;
    end
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
end

if (pla[84]) begin
    $display("pla[84] : ALU ADD");
    begin 
                   
        ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=0;                                                                ctl_pf_sel=`PFSEL_V;
    if (ctl_alu_op_low) begin
                                                                                     ctl_flags_cf_set=1; ctl_flags_cf_cpl=1;
    end else begin
        ctl_alu_core_hf=1;
    end
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
end

if (pla[85]) begin
    $display("pla[85] : ALU AND");
    begin 
                    ctl_alu_core_R=0; ctl_alu_core_V=0; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_pf_sel=`PFSEL_P;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
end

if (pla[86]) begin
    $display("pla[86] : ALU OR");
    begin 
                    ctl_alu_core_R=1; ctl_alu_core_V=1; ctl_alu_core_S=1; ctl_flags_cf_set=1; ctl_flags_cf_cpl=1; ctl_pf_sel=`PFSEL_P;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
end

if (pla[88]) begin
    $display("pla[88] : ALU XOR");
    begin 
                    ctl_alu_core_R=1; ctl_alu_core_V=0; ctl_alu_core_S=0; ctl_pf_sel=`PFSEL_P;
                    ctl_flags_nf_we=1; ctl_flags_nf_set=0; /* Means we are not setting it */ end
end

// Default instruction fetch (M1) state machine
if (M1) begin
    if (M1 && T1) begin  fFetch=1;
                    ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit PC */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */ end
    if (M1 && T2) begin  fFetch=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_pc=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit PC */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */ end
    if (M1 && T3) begin  fFetch=1;
                    ctl_reg_sel_ir=1; ctl_reg_sys_hilo=2'b11; /* Select 16-bit IR */
                    ctl_al_we=1; ctl_inc_cy=1; /* Write latch and start incrementing */
                    ctl_reg_gp_sel=`GP_REG_AF; ctl_reg_gp_hilo=2'b11;
                    ctl_bus_db_oe=1; /* Read DB pads to internal data bus */
                    ctl_flags_bus=1; /* Load FLAGT from the data bus */
                    ctl_alu_shift_oe=!ctl_alu_bs_oe; /* Shifter unit without shift-enable */
                    ctl_alu_op2_sel_bus=1; /* Internal bus */
                    ctl_alu_op1_sel_bus=1; /* Internal bus */
                    ctl_flags_sz_we=1;
                    ctl_flags_xy_we=1;
                    ctl_flags_hf_we=1;
                    ctl_flags_pf_we=1;
                    ctl_flags_nf_we=1;
                    ctl_flags_cf_we=1;
                    ctl_ir_we = 1; /* Write the opcode into the instruction register */ end
    if (M1 && T4) begin  fFetch=1;
                    ctl_reg_sys_we=1; ctl_reg_sel_ir=1; ctl_reg_sys_hilo=2'b11; /* Write 16-bit IR */
                    ctl_bus_inc_oe=1; ctl_inc_cy=1; /* Output enable while holding to increment */
                    ctl_inc_limit6=1; /* Limit the incrementer to 6 bits */ end
end

