#!/usr/bin/env python
#
# This script generates a test include file from a set of "Fuse" test vectors.
#
import os

# Start with a test name (this is a string, see tests files)
start_test = "03"

# Number of tests to run, use -1 to run all tests
run_tests = 1

with open('fuse/tests.in') as f1:
    t1 = f1.read().splitlines()
# Remove all tests until the one we need to start with. Tests are separated by empty lines.
while t1[0]!=start_test:
    while len(t1.pop(0))>0:
        pass
t1 = filter(None, t1)   # Filter out empty lines

with open('fuse/tests.expected') as f2:
    t2 = f2.read().splitlines()
while t2[0]!=start_test:
    while len(t2.pop(0))>0:
        pass

# Count total clocks required to run all selected tests
total_clks = 0

# Create a file that should be included in the test_fuse source
ftest = open('test_fuse.i', 'w')
ftest.write("// Automatically generated by genfuse.py\n\n")

def RegOut(reg, hex):
    global total_clks
    ftest.write("#1 force dut.reg_file.b2v_latch_" + reg + "_lo.we=1;\n")
    ftest.write("   force dut.reg_file.b2v_latch_" + reg + "_hi.we=1;\n")
    ftest.write("   force dut.reg_file.b2v_latch_" + reg + "_lo.db=8'h" + hex[2:] + ";\n")
    ftest.write("   force dut.reg_file.b2v_latch_" + reg + "_hi.db=8'h" + hex[0:2] + ";\n")
    ftest.write("#1 release dut.reg_file.b2v_latch_" + reg + "_lo.we;\n")
    ftest.write("   release dut.reg_file.b2v_latch_" + reg + "_hi.we;\n")
    ftest.write("   release dut.reg_file.b2v_latch_" + reg + "_lo.db;\n")
    ftest.write("   release dut.reg_file.b2v_latch_" + reg + "_hi.db;\n")
    total_clks = total_clks + 2

def RegIn(reg, hex):
    global total_clks
    ftest.write("#1 force dut.reg_file.b2v_latch_" + reg + "_lo.oe=1;\n")
    ftest.write("   force dut.reg_file.b2v_latch_" + reg + "_hi.oe=1;\n")
    ftest.write("   if (dut.reg_file.b2v_latch_" + reg + "_lo.db!=8'h" + hex[2:] +  ") $display(\"Reg " + reg + " mismatch: %h/" + hex[2:] +  "\",dut.reg_file.b2v_latch_" + reg + "_lo.db);\n")
    ftest.write("   if (dut.reg_file.b2v_latch_" + reg + "_hi.db!=8'h" + hex[0:2] + ") $display(\"Reg " + reg + " mismatch: %h/" + hex[0:2] + "\",dut.reg_file.b2v_latch_" + reg + "_hi.db);\n")
    ftest.write("#1 release dut.reg_file.b2v_latch_" + reg + "_lo.oe;\n")
    ftest.write("   release dut.reg_file.b2v_latch_" + reg + "_hi.oe;\n")
    total_clks = total_clks + 2

# Read each test from the testdat.in file
while True:
    ftest.write("//" + "-" * 80 + "\n")
    if len(t1)==0 or run_tests==0:
        break
    run_tests = run_tests-1
    ftest.write("force dut.z80_top.fpga_reset=1;\n")

    # Format of the test.in file:
    # <arbitrary test description>
    # AF BC DE HL AF' BC' DE' HL' IX IY SP PC
    # I R IFF1 IFF2 IM <halted> <tstates>
    name = t1.pop(0)
    ftest.write("$display(\"Test configuration " + name + "\");\n\n")
    r = t1.pop(0).split(' ')
    r = filter(None, r)
    # 0  1  2  3  4   5   6   7   8  9  10 11   (index)
    # AF BC DE HL AF' BC' DE' HL' IX IY SP PC
    RegOut("af", r[0])
    RegOut("bc", r[1])
    RegOut("de", r[2])
    RegOut("hl", r[3])
    RegOut("af2", r[4])
    RegOut("bc2", r[5])
    RegOut("de2", r[6])
    RegOut("hl2", r[7])
    RegOut("ix", r[8])
    RegOut("iy", r[9])
    RegOut("sp", r[10])
    RegOut("pc", r[11])

    s = t1.pop(0).split(' ')
    s = filter(None, s)
    # 0 1 2    3    4  5        6          (index)
    # I R IFF1 IFF2 IM <halted> <tstates?>
    RegOut("ir", s[0]+s[1])
    # TODO: Store IFF1/IFF2, IM, in_halt

    # Read memory configuration until the line contains only -1
    while True:
        m = t1.pop(0).split(' ')
        if m[0]=="-1":
            break
        address = int(m.pop(0),16)
        while True:
            d = m.pop(0)
            if d=="-1":
                break
            ftest.write("   ram.Mem[" + str(address) + "] = 8'h" + d + ";\n")
            address = address+1

    ftest.write("#1 force dut.z80_top.fpga_reset=0;\n")
    total_clks = total_clks + 1
    ftest.write("   $display(\"Releasing reset\");\n")

    # Read and parse the tests expected list which contains the expected results of our run,
    # including the number of clocks for a particular instruction
    xname = t2.pop(0)
    if name!=xname:
        print("Test " + name + " does not correspond to test.expected " + xname)
        break
    # Skip the memory access logs; read to the expected register content list
    while True:
        l = t2.pop(0)
        if l[0]!=' ':
            break
    r = l.split(' ')
    r = filter(None, r)

    s = t2.pop(0).split(' ')
    s = filter(None, s)

    ticks = (int(s[6]) + 2) * 2
    total_clks = total_clks + ticks
    ftest.write("\n   #" + str(ticks) + "\n\n")

    # Now we can issue register reading commands
    # We are guided on what to read and check by the content of "test.expected" file
    ftest.write("   $display(\"Reading result\");\n")
    ftest.write("   force dut.z80_top.fpga_reset=1;\n")

    # Read the result: registers and memory
    # 0  1  2  3  4   5   6   7   8  9  10 11   (index)
    # AF BC DE HL AF' BC' DE' HL' IX IY SP PC
    RegIn("af", r[0])
    RegIn("bc", r[1])
    RegIn("de", r[2])
    RegIn("hl", r[3])
    RegIn("af2", r[4])
    RegIn("bc2", r[5])
    RegIn("de2", r[6])
    RegIn("hl2", r[7])
    RegIn("ix", r[8])
    RegIn("iy", r[9])
    RegIn("sp", r[10])
    RegIn("pc", r[11])
    # 0 1 2    3    4  5        6          (index)
    # I R IFF1 IFF2 IM <halted> <tstates?>
    RegOut("ir", s[0]+s[1])

    # Read memory configurations until an empty line or -1 at the end
    while True:
        m = t2.pop(0).split(' ')
        m = filter(None, m)
        if len(m)==0 or m[0]=="-1":
            break
        address = int(m.pop(0),16)
        while True:
            d = m.pop(0)
            if d=="-1":
                break
            ftest.write("   if (ram.Mem[" + str(address) + "]!=8'h" + d + ") $display(\"Mem mismatch: %h/" + d + "\",ram.Mem[" + str(address) + "]);\n")
            address = address+1

# Write out the total number of clocks that this set of tests takes to execute
ftest.write("`define TOTAL_CLKS " + str(total_clks + 1) + "\n")
ftest.write("$display(\"*** Test completed ***\");\n")

# Touch a file that includes 'test_fuse.i' to ensure it will recompile correctly
os.utime("test_fuse.sv", None)
